/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_DIRECTMQ_V1_DIRECTMQ_V1_DATA_FRAME_PB_H_INCLUDED
#define PB_DIRECTMQ_V1_DIRECTMQ_V1_DATA_FRAME_PB_H_INCLUDED
#include <pb.h>
#include "directmq/v1/connection.pb.h"
#include "directmq/v1/publish.pb.h"
#include "directmq/v1/subscribe.pb.h"
#include "directmq/v1/unsubscribe.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _directmq_v1_DataFrame {
    int32_t *ttl;
    pb_size_t traversed_count;
    char **traversed;
    pb_size_t which_message;
    union {
        struct _directmq_v1_SupportedProtocolVersions *supported_protocol_versions;
        struct _directmq_v1_InitConnection *init_connection;
        struct _directmq_v1_ConnectionAccepted *connection_accepted;
        struct _directmq_v1_Publish *publish;
        struct _directmq_v1_Subscribe *subscribe;
        struct _directmq_v1_Unsubscribe *unsubscribe;
        struct _directmq_v1_GracefullyClose *gracefully_close;
        struct _directmq_v1_TerminateNetwork *terminate_network;
    } message;
} directmq_v1_DataFrame;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define directmq_v1_DataFrame_init_default       {NULL, 0, NULL, 0, {NULL}}
#define directmq_v1_DataFrame_init_zero          {NULL, 0, NULL, 0, {NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define directmq_v1_DataFrame_ttl_tag            1
#define directmq_v1_DataFrame_traversed_tag      2
#define directmq_v1_DataFrame_supported_protocol_versions_tag 3
#define directmq_v1_DataFrame_init_connection_tag 4
#define directmq_v1_DataFrame_connection_accepted_tag 5
#define directmq_v1_DataFrame_publish_tag        6
#define directmq_v1_DataFrame_subscribe_tag      7
#define directmq_v1_DataFrame_unsubscribe_tag    8
#define directmq_v1_DataFrame_gracefully_close_tag 9
#define directmq_v1_DataFrame_terminate_network_tag 10

/* Struct field encoding specification for nanopb */
#define directmq_v1_DataFrame_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, INT32,    ttl,               1) \
X(a, POINTER,  REPEATED, STRING,   traversed,         2) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,supported_protocol_versions,message.supported_protocol_versions),   3) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,init_connection,message.init_connection),   4) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,connection_accepted,message.connection_accepted),   5) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,publish,message.publish),   6) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,subscribe,message.subscribe),   7) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,unsubscribe,message.unsubscribe),   8) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,gracefully_close,message.gracefully_close),   9) \
X(a, POINTER,  ONEOF,    MESSAGE,  (message,terminate_network,message.terminate_network),  10)
#define directmq_v1_DataFrame_CALLBACK NULL
#define directmq_v1_DataFrame_DEFAULT NULL
#define directmq_v1_DataFrame_message_supported_protocol_versions_MSGTYPE directmq_v1_SupportedProtocolVersions
#define directmq_v1_DataFrame_message_init_connection_MSGTYPE directmq_v1_InitConnection
#define directmq_v1_DataFrame_message_connection_accepted_MSGTYPE directmq_v1_ConnectionAccepted
#define directmq_v1_DataFrame_message_publish_MSGTYPE directmq_v1_Publish
#define directmq_v1_DataFrame_message_subscribe_MSGTYPE directmq_v1_Subscribe
#define directmq_v1_DataFrame_message_unsubscribe_MSGTYPE directmq_v1_Unsubscribe
#define directmq_v1_DataFrame_message_gracefully_close_MSGTYPE directmq_v1_GracefullyClose
#define directmq_v1_DataFrame_message_terminate_network_MSGTYPE directmq_v1_TerminateNetwork

extern const pb_msgdesc_t directmq_v1_DataFrame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define directmq_v1_DataFrame_fields &directmq_v1_DataFrame_msg

/* Maximum encoded size of messages (where known) */
/* directmq_v1_DataFrame_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
